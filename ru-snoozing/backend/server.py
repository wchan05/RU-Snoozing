from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import google.generativeai as genai
import os

# 1Ô∏è‚É£ Load environment variables
load_dotenv()

# 2Ô∏è‚É£ Configure Gemini API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# 3Ô∏è‚É£ Initialize Flask
app = Flask(__name__)
CORS(app)  # allow requests from frontend

# 4Ô∏è‚É£ Storage for latest interaction
latest_interaction = {"text": None, "response": None}

# 5Ô∏è‚É£ Test route
@app.route("/")
def home():
    return "Flask backend is running ‚úÖ"

# 6Ô∏è‚É£ Gemini route ‚Äî handles text input from frontend
@app.route("/gemini", methods=["POST"])
def gemini_response():
    data = request.get_json()
    user_text = data.get("text", "").strip()

    if not user_text:
        return jsonify({"error": "No text provided"}), 400

    try:
        print(f"\nüü¢ New Input Received: {user_text}\n")

        # Wrap the user's intent in instructions
        prompt = f"""
You are a voice assistant. The user gives a short intent like "pep talk", "scary voice", or "motivation".
Reply as a voice assistant with exactly two short, natural sentences that match the tone.
It must sound human and spoken ‚Äî not robotic.
Generate your response based on this intent: "{user_text}"
Examples:
pep talk ‚Üí "Come on, you've got this! Don't quit now."
scary voice ‚Üí "If you sleep now, something's watching. Stay awake."
motivation ‚Üí "Every second counts. Keep pushing."
The output should ultimately be motivational and to keep the user awake.
"""

        # Generate response
        model = genai.GenerativeModel("gemini-2.5-flash")
        response = model.generate_content(prompt)
        gemini_output = response.text.strip()

        # Save latest interaction
        latest_interaction["text"] = user_text
        latest_interaction["response"] = gemini_output

        print(f"üí¨ Gemini Response: {gemini_output}\n")

        # Return confirmation + Gemini output
        return jsonify({
            "message": "‚úÖ Received text successfully!",
            "input": user_text,
            "response": gemini_output
        })
    except Exception as e:
        print("‚ùå Error:", e)
        return jsonify({"error": str(e)}), 500


# 7Ô∏è‚É£ Retrieve last stored response
@app.route("/latest", methods=["GET"])
def get_latest():
    if not latest_interaction["response"]:
        return jsonify({"message": "No previous interaction yet."}), 404
    return jsonify(latest_interaction)

# 8Ô∏è‚É£ Run the server
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001, debug=True)
